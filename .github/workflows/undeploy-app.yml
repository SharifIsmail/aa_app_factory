name: Undeploy Extensibility Apps

on:
  # Manual trigger only
  workflow_dispatch:
    inputs:
      usecase_name:
        description: 'Usecase name to undeploy'
        required: true
        type: string
      environment:
        description: 'Environment to undeploy from'
        required: true
        type: choice
        options:
          - c-prod (dev)
          - schwarz-tenant (stage)
          - pwc (partner stage)

jobs:
  check-permissions:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check if user has deployment permissions
        id: check-deployment-permissions
        run: |
          # Get the user's Role level
          PERMISSION_ROLE=$(curl -s \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission" | \
            jq -r '.role_name')

          if [[ "$PERMISSION_ROLE" != "admin" && "$PERMISSION_ROLE" != "maintain" ]]; then
            echo "::error::User ${{ github.actor }} does not have the necessary deployment permissions"
            echo "Current permission role: $PERMISSION_ROLE"
            exit 1
          fi
          echo "User ${{ github.actor }} has deployment permissions (role: $PERMISSION_ROLE)"

  undeploy:
    needs: [check-permissions]
    permissions:
      contents: read
    runs-on: ubuntu-latest
    env:
      SERVICE_AUTHENTICATION_TOKEN: ${{ github.event.inputs.environment == 'c-prod (dev)' && secrets.SERVICE_AUTHENTICATION_TOKEN || github.event.inputs.environment == 'schwarz-tenant (stage)' && secrets.SERVICE_AUTHENTICATION_TOKEN || github.event.inputs.environment == 'pwc (partner stage)' && secrets.SERVICE_AUTHENTICATION_TOKEN_PWC }}
      PHARIAOS_MANAGER_URL: ${{ github.event.inputs.environment == 'c-prod (dev)' && vars.PHARIAOS_MANAGER_URL_DEV || github.event.inputs.environment == 'schwarz-tenant (stage)' && vars.PHARIAOS_MANAGER_URL_STAGE || github.event.inputs.environment == 'pwc (partner stage)' && vars.PHARIAOS_MANAGER_URL_PWC }}
      USECASE_NAME: ${{ github.event.inputs.usecase_name }}
      ENVIRONMENT: ${{ github.event.inputs.environment }}

    outputs:
      UNDEPLOY_SUCCESS: ${{ steps.undeploy-step.outputs.UNDEPLOY_SUCCESS }}
      USECASE_ID: ${{ steps.undeploy-step.outputs.USECASE_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Undeploy Application
        id: undeploy-step
        run: |
          BASE_URL="${PHARIAOS_MANAGER_URL}/api/usecases"
          
          # Initial values for pagination
          page=1
          limit=100
          has_more=true
          all_results=()
          
          # Loop until there are no more pages to fetch all usecases
          while $has_more; do
            echo "Fetching page $page..."
            response=$(curl --silent --request GET \
              --url "$BASE_URL?page=$page&limit=$limit" \
              --header "Authorization: Bearer ${SERVICE_AUTHENTICATION_TOKEN}")
            
            # Check if the response is valid JSON and contains the expected structure
            if ! echo "$response" | jq -e '.data' > /dev/null 2>&1; then
              echo "Error: Invalid response from API"
              echo "Response: $response"
              exit 1
            fi
            
            # Extract just the data array from this page
            page_data=$(echo "$response" | jq '.data')
            
            # Check if we got any results
            result_count=$(echo "$page_data" | jq '. | length')
            
            if [ "$result_count" -eq 0 ] || [ -z "$result_count" ]; then
              has_more=false
              echo "No more results."
            else
              # Add this page's data to our collection
              all_results+=("$page_data")
              echo "Got $result_count results on page $page"
              page=$((page+1))
            fi
          done
          
          # Combine all results into a single JSON array
          if [ ${#all_results[@]} -eq 0 ]; then
            echo "No results found"
            exit 1
          fi
          
          combined_results=$(jq -s 'add' <<< "${all_results[@]}")
          echo "Total results: $(echo "$combined_results" | jq '. | length')"
          
          # Find the usecase by name
          usecase_id=$(echo "$combined_results" | jq -r ".[] | select(.name == \"${USECASE_NAME}\") | .id")
          deployment_id=$(echo "$combined_results" | jq -r ".[] | select(.name == \"${USECASE_NAME}\") | .deployment.id")
          echo "Usecase ID: $usecase_id"
          echo "Deployment ID: $deployment_id"
          
          # If usecase not found, exit
          if [ -z "$usecase_id" ] || [ "$usecase_id" = "null" ]; then
            echo "Exiting... Usecase ${USECASE_NAME} not found"
            exit 1
          fi
          
          echo "USECASE_ID=${usecase_id}" >> $GITHUB_OUTPUT
          
          # UNDEPLOY
          echo "Undeploying usecase..."
          response=$(curl --request DELETE \
            --url "${BASE_URL}/${usecase_id}/deployments" \
            --header "Authorization: Bearer ${SERVICE_AUTHENTICATION_TOKEN}")
          
          echo "Response: $response"
          
          # Check the response status code
          status_code=$(echo "$response" | jq -r '.status')
          if [ "$status_code" = "404" ]; then
            echo "Usecase not found"
            echo "UNDEPLOY_SUCCESS=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ "$status_code" = "422" ]; then
            echo "Usecase is not deployed"
            echo "UNDEPLOY_SUCCESS=false" >> $GITHUB_OUTPUT
          else
            echo "Usecase undeployment triggered successfully"
            echo "UNDEPLOY_SUCCESS=true" >> $GITHUB_OUTPUT
          fi

      - name: Set Undeploy Summary
        if: always()
        run: |
          echo "### Undeploy Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Usecase name: **${{ env.USECASE_NAME }}**" >> $GITHUB_STEP_SUMMARY
          echo "✅ Environment: **${{ env.ENVIRONMENT }}**" >> $GITHUB_STEP_SUMMARY
          echo "✅ Triggered by: **${{ github.actor }}**" >> $GITHUB_STEP_SUMMARY
          echo "✅ Undeploy Time: **$(date)**" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.undeploy-step.outputs.UNDEPLOY_SUCCESS }}" = "true" ]; then
            echo "✅ Undeploy Status: **Success** for usecase id: **${{ steps.undeploy-step.outputs.USECASE_ID }}**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Undeploy Status: **Failed** for usecase id: **${{ steps.undeploy-step.outputs.USECASE_ID }}**" >> $GITHUB_STEP_SUMMARY
          fi 