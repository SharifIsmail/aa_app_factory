name: 'Setup Container Environment'
description: 'Sets up environment files and structure for container building'
inputs:
  app_name:
    description: 'Application name'
    required: true
  build_context:
    description: 'Build context directory'
    required: true
  build_env:
    description: 'Build environment (production/development)'
    required: true
    default: 'development'
  # Core service URLs
  service_pharia_kernel_url:
    description: 'Pharia Kernel URL'
    required: true
  service_pharia_auth_service_url:
    description: 'Pharia Auth Service URL'
    required: true
  service_pharia_iam_issuer_url:
    description: 'Pharia IAM Issuer URL'
    required: true
  service_pharia_data_url:
    description: 'Pharia Data URL'
    required: true
  service_inference_api_url:
    description: 'Inference API URL'
    required: true
  service_completion_model_name:
    description: 'Completion Model Name'
    required: true
  service_authentication_token:
    description: 'Authentication Token'
    required: true
  # App-specific secrets
  serper_api_key:
    description: 'Serper API Key'
    required: false
  abstract_api_key:
    description: 'Abstract API Key'
    required: false
outputs:
  env_file_path:
    description: 'Path to generated .env file'
    value: ${{ steps.setup.outputs.env_file_path }}
runs:
  using: 'composite'
  steps:
    - name: Generate environment files
      id: setup
      shell: bash
      run: |
        echo "::group::Setting up container environment"
        
        APP_ENV_DIR="${{ inputs.build_context }}"
        ENV_FILE="${APP_ENV_DIR}/.env"
        
        # Check if .env.sample exists to use as a template
        if [ -f "${APP_ENV_DIR}/.env.sample" ]; then
          echo "Found .env.sample, using as template"
          cp "${APP_ENV_DIR}/.env.sample" "${ENV_FILE}"
        else
          echo "Creating new .env file"
          touch "${ENV_FILE}"
        fi
        
        # Add environment variables
        echo "" >> "${ENV_FILE}"
        echo "# Generated by GitHub Actions" >> "${ENV_FILE}"
        echo "# Environment: ${{ inputs.build_env }}" >> "${ENV_FILE}"
        
        # Common environment variables
        echo "APP_ENV=${{ inputs.build_env }}" >> "${ENV_FILE}"
        echo "DEBUG=${{ inputs.build_env == 'production' && 'false' || 'true' }}" >> "${ENV_FILE}"
        echo "SERVICE_PHARIA_KERNEL_URL=${{ inputs.service_pharia_kernel_url }}" >> "${ENV_FILE}"
        echo "SERVICE_PHARIA_AUTH_SERVICE_URL=${{ inputs.service_pharia_auth_service_url }}" >> "${ENV_FILE}"
        echo "SERVICE_PHARIA_IAM_ISSUER_URL=${{ inputs.service_pharia_iam_issuer_url }}" >> "${ENV_FILE}"
        echo "SERVICE_PHARIA_DATA_URL=${{ inputs.service_pharia_data_url }}" >> "${ENV_FILE}"
        echo "SERVICE_INFERENCE_API_URL=${{ inputs.service_inference_api_url }}" >> "${ENV_FILE}"
        echo "SERVICE_COMPLETION_MODEL_NAME=${{ inputs.service_completion_model_name }}" >> "${ENV_FILE}"
        echo "SERVICE_AUTHENTICATION_TOKEN=${{ inputs.service_authentication_token }}" >> "${ENV_FILE}"
        
        # App-specific environment variables
        case "${{ inputs.app_name }}" in
          "supplier_analysis"|"agentic_app_template")
            if [ -n "${{ inputs.serper_api_key }}" ]; then
              echo "SERPER_API_KEY=${{ inputs.serper_api_key }}" >> "${ENV_FILE}"
            fi
            if [ -n "${{ inputs.abstract_api_key }}" ]; then
              echo "ABSTRACT_API_KEY=${{ inputs.abstract_api_key }}" >> "${ENV_FILE}"
            fi
            ;;
        esac
        
        echo "Created .env file at ${ENV_FILE}"
        echo "env_file_path=${ENV_FILE}" >> $GITHUB_OUTPUT
        
        # Create empty uv.lock if needed
        DOCKERFILE_PATH=$(find "${APP_ENV_DIR}" -name "Containerfile" -o -name "Dockerfile" | head -1)
        if [ -n "$DOCKERFILE_PATH" ] && ! [ -f "${APP_ENV_DIR}/uv.lock" ] && grep -q "uv.lock" "${DOCKERFILE_PATH}"; then
          echo "Creating empty uv.lock file"
          touch "${APP_ENV_DIR}/uv.lock"
        fi
        
        echo "::endgroup::"
